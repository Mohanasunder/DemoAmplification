/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PoHeaderService } from "../poHeader.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PoHeaderCreateInput } from "./PoHeaderCreateInput";
import { PoHeaderWhereInput } from "./PoHeaderWhereInput";
import { PoHeaderWhereUniqueInput } from "./PoHeaderWhereUniqueInput";
import { PoHeaderFindManyArgs } from "./PoHeaderFindManyArgs";
import { PoHeaderUpdateInput } from "./PoHeaderUpdateInput";
import { PoHeader } from "./PoHeader";
import { PoItemFindManyArgs } from "../../poItem/base/PoItemFindManyArgs";
import { PoItem } from "../../poItem/base/PoItem";
import { PoItemWhereUniqueInput } from "../../poItem/base/PoItemWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PoHeaderControllerBase {
  constructor(
    protected readonly service: PoHeaderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PoHeader })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: PoHeaderCreateInput): Promise<PoHeader> {
    return await this.service.create({
      data: {
        ...data,

        docType: data.docType
          ? {
              connect: data.docType,
            }
          : undefined,

        supplierNo: {
          connect: data.supplierNo,
        },
      },
      select: {
        amount: true,
        createdAt: true,
        currency: true,

        docType: {
          select: {
            id: true,
          },
        },

        documentDate: true,
        documentNo: true,
        id: true,

        supplierNo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [PoHeader] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(PoHeaderFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<PoHeader[]> {
    const args = plainToClass(PoHeaderFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        currency: true,

        docType: {
          select: {
            id: true,
          },
        },

        documentDate: true,
        documentNo: true,
        id: true,

        supplierNo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PoHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: PoHeaderWhereUniqueInput
  ): Promise<PoHeader | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        currency: true,

        docType: {
          select: {
            id: true,
          },
        },

        documentDate: true,
        documentNo: true,
        id: true,

        supplierNo: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PoHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: PoHeaderWhereUniqueInput,
    @common.Body() data: PoHeaderUpdateInput
  ): Promise<PoHeader | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          docType: data.docType
            ? {
                connect: data.docType,
              }
            : undefined,

          supplierNo: {
            connect: data.supplierNo,
          },
        },
        select: {
          amount: true,
          createdAt: true,
          currency: true,

          docType: {
            select: {
              id: true,
            },
          },

          documentDate: true,
          documentNo: true,
          id: true,

          supplierNo: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PoHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: PoHeaderWhereUniqueInput
  ): Promise<PoHeader | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          currency: true,

          docType: {
            select: {
              id: true,
            },
          },

          documentDate: true,
          documentNo: true,
          id: true,

          supplierNo: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/poItems")
  @ApiNestedQuery(PoItemFindManyArgs)
  async findManyPoItems(
    @common.Req() request: Request,
    @common.Param() params: PoHeaderWhereUniqueInput
  ): Promise<PoItem[]> {
    const query = plainToClass(PoItemFindManyArgs, request.query);
    const results = await this.service.findPoItems(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,

        material: {
          select: {
            id: true,
          },
        },

        poHeader: {
          select: {
            id: true,
          },
        },

        quantity: true,

        unitofMeasures: {
          select: {
            id: true,
          },
        },

        unitPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/poItems")
  async connectPoItems(
    @common.Param() params: PoHeaderWhereUniqueInput,
    @common.Body() body: PoItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      poItems: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/poItems")
  async updatePoItems(
    @common.Param() params: PoHeaderWhereUniqueInput,
    @common.Body() body: PoItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      poItems: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/poItems")
  async disconnectPoItems(
    @common.Param() params: PoHeaderWhereUniqueInput,
    @common.Body() body: PoItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      poItems: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
