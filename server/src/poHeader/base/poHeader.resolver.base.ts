/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePoHeaderArgs } from "./CreatePoHeaderArgs";
import { UpdatePoHeaderArgs } from "./UpdatePoHeaderArgs";
import { DeletePoHeaderArgs } from "./DeletePoHeaderArgs";
import { PoHeaderFindManyArgs } from "./PoHeaderFindManyArgs";
import { PoHeaderFindUniqueArgs } from "./PoHeaderFindUniqueArgs";
import { PoHeader } from "./PoHeader";
import { PoItemFindManyArgs } from "../../poItem/base/PoItemFindManyArgs";
import { PoItem } from "../../poItem/base/PoItem";
import { DocumentType } from "../../documentType/base/DocumentType";
import { Supplier } from "../../supplier/base/Supplier";
import { PoHeaderService } from "../poHeader.service";

@graphql.Resolver(() => PoHeader)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PoHeaderResolverBase {
  constructor(
    protected readonly service: PoHeaderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "read",
    possession: "any",
  })
  async _poHeadersMeta(
    @graphql.Args() args: PoHeaderFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PoHeader])
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "read",
    possession: "any",
  })
  async poHeaders(
    @graphql.Args() args: PoHeaderFindManyArgs
  ): Promise<PoHeader[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PoHeader, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "read",
    possession: "own",
  })
  async poHeader(
    @graphql.Args() args: PoHeaderFindUniqueArgs
  ): Promise<PoHeader | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoHeader)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "create",
    possession: "any",
  })
  async createPoHeader(
    @graphql.Args() args: CreatePoHeaderArgs
  ): Promise<PoHeader> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        docType: args.data.docType
          ? {
              connect: args.data.docType,
            }
          : undefined,

        supplierNo: {
          connect: args.data.supplierNo,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoHeader)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "update",
    possession: "any",
  })
  async updatePoHeader(
    @graphql.Args() args: UpdatePoHeaderArgs
  ): Promise<PoHeader | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          docType: args.data.docType
            ? {
                connect: args.data.docType,
              }
            : undefined,

          supplierNo: {
            connect: args.data.supplierNo,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PoHeader)
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "delete",
    possession: "any",
  })
  async deletePoHeader(
    @graphql.Args() args: DeletePoHeaderArgs
  ): Promise<PoHeader | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PoItem])
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "read",
    possession: "any",
  })
  async poItems(
    @graphql.Parent() parent: PoHeader,
    @graphql.Args() args: PoItemFindManyArgs
  ): Promise<PoItem[]> {
    const results = await this.service.findPoItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DocumentType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "read",
    possession: "any",
  })
  async docType(
    @graphql.Parent() parent: PoHeader
  ): Promise<DocumentType | null> {
    const result = await this.service.getDocType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supplier, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async supplierNo(
    @graphql.Parent() parent: PoHeader
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplierNo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
