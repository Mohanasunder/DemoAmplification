/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMaterialArgs } from "./CreateMaterialArgs";
import { UpdateMaterialArgs } from "./UpdateMaterialArgs";
import { DeleteMaterialArgs } from "./DeleteMaterialArgs";
import { MaterialFindManyArgs } from "./MaterialFindManyArgs";
import { MaterialFindUniqueArgs } from "./MaterialFindUniqueArgs";
import { Material } from "./Material";
import { PoItemFindManyArgs } from "../../poItem/base/PoItemFindManyArgs";
import { PoItem } from "../../poItem/base/PoItem";
import { UnitOfMeasure } from "../../unitOfMeasure/base/UnitOfMeasure";
import { MaterialService } from "../material.service";

@graphql.Resolver(() => Material)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MaterialResolverBase {
  constructor(
    protected readonly service: MaterialService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "read",
    possession: "any",
  })
  async _materialsMeta(
    @graphql.Args() args: MaterialFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Material])
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "read",
    possession: "any",
  })
  async materials(
    @graphql.Args() args: MaterialFindManyArgs
  ): Promise<Material[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Material, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "read",
    possession: "own",
  })
  async material(
    @graphql.Args() args: MaterialFindUniqueArgs
  ): Promise<Material | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Material)
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "create",
    possession: "any",
  })
  async createMaterial(
    @graphql.Args() args: CreateMaterialArgs
  ): Promise<Material> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        uoMCode: {
          connect: args.data.uoMCode,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Material)
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "update",
    possession: "any",
  })
  async updateMaterial(
    @graphql.Args() args: UpdateMaterialArgs
  ): Promise<Material | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          uoMCode: {
            connect: args.data.uoMCode,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Material)
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "delete",
    possession: "any",
  })
  async deleteMaterial(
    @graphql.Args() args: DeleteMaterialArgs
  ): Promise<Material | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PoItem])
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "read",
    possession: "any",
  })
  async poItems(
    @graphql.Parent() parent: Material,
    @graphql.Args() args: PoItemFindManyArgs
  ): Promise<PoItem[]> {
    const results = await this.service.findPoItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UnitOfMeasure, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "read",
    possession: "any",
  })
  async uoMCode(
    @graphql.Parent() parent: Material
  ): Promise<UnitOfMeasure | null> {
    const result = await this.service.getUoMCode(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
