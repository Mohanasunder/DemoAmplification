/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDocumentTypeArgs } from "./CreateDocumentTypeArgs";
import { UpdateDocumentTypeArgs } from "./UpdateDocumentTypeArgs";
import { DeleteDocumentTypeArgs } from "./DeleteDocumentTypeArgs";
import { DocumentTypeFindManyArgs } from "./DocumentTypeFindManyArgs";
import { DocumentTypeFindUniqueArgs } from "./DocumentTypeFindUniqueArgs";
import { DocumentType } from "./DocumentType";
import { PoHeader } from "../../poHeader/base/PoHeader";
import { DocumentTypeService } from "../documentType.service";

@graphql.Resolver(() => DocumentType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DocumentTypeResolverBase {
  constructor(
    protected readonly service: DocumentTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "read",
    possession: "any",
  })
  async _documentTypesMeta(
    @graphql.Args() args: DocumentTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DocumentType])
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "read",
    possession: "any",
  })
  async documentTypes(
    @graphql.Args() args: DocumentTypeFindManyArgs
  ): Promise<DocumentType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DocumentType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "read",
    possession: "own",
  })
  async documentType(
    @graphql.Args() args: DocumentTypeFindUniqueArgs
  ): Promise<DocumentType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DocumentType)
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "create",
    possession: "any",
  })
  async createDocumentType(
    @graphql.Args() args: CreateDocumentTypeArgs
  ): Promise<DocumentType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        typeId: args.data.typeId
          ? {
              connect: args.data.typeId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DocumentType)
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "update",
    possession: "any",
  })
  async updateDocumentType(
    @graphql.Args() args: UpdateDocumentTypeArgs
  ): Promise<DocumentType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          typeId: args.data.typeId
            ? {
                connect: args.data.typeId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocumentType)
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "delete",
    possession: "any",
  })
  async deleteDocumentType(
    @graphql.Args() args: DeleteDocumentTypeArgs
  ): Promise<DocumentType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PoHeader, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "read",
    possession: "any",
  })
  async typeId(
    @graphql.Parent() parent: DocumentType
  ): Promise<PoHeader | null> {
    const result = await this.service.getTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
