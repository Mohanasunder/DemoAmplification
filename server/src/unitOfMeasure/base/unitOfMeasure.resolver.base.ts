/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUnitOfMeasureArgs } from "./CreateUnitOfMeasureArgs";
import { UpdateUnitOfMeasureArgs } from "./UpdateUnitOfMeasureArgs";
import { DeleteUnitOfMeasureArgs } from "./DeleteUnitOfMeasureArgs";
import { UnitOfMeasureFindManyArgs } from "./UnitOfMeasureFindManyArgs";
import { UnitOfMeasureFindUniqueArgs } from "./UnitOfMeasureFindUniqueArgs";
import { UnitOfMeasure } from "./UnitOfMeasure";
import { MaterialFindManyArgs } from "../../material/base/MaterialFindManyArgs";
import { Material } from "../../material/base/Material";
import { PoItem } from "../../poItem/base/PoItem";
import { UnitOfMeasureService } from "../unitOfMeasure.service";

@graphql.Resolver(() => UnitOfMeasure)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UnitOfMeasureResolverBase {
  constructor(
    protected readonly service: UnitOfMeasureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "read",
    possession: "any",
  })
  async _unitOfMeasuresMeta(
    @graphql.Args() args: UnitOfMeasureFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UnitOfMeasure])
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "read",
    possession: "any",
  })
  async unitOfMeasures(
    @graphql.Args() args: UnitOfMeasureFindManyArgs
  ): Promise<UnitOfMeasure[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UnitOfMeasure, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "read",
    possession: "own",
  })
  async unitOfMeasure(
    @graphql.Args() args: UnitOfMeasureFindUniqueArgs
  ): Promise<UnitOfMeasure | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UnitOfMeasure)
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "create",
    possession: "any",
  })
  async createUnitOfMeasure(
    @graphql.Args() args: CreateUnitOfMeasureArgs
  ): Promise<UnitOfMeasure> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        poItem: args.data.poItem
          ? {
              connect: args.data.poItem,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UnitOfMeasure)
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "update",
    possession: "any",
  })
  async updateUnitOfMeasure(
    @graphql.Args() args: UpdateUnitOfMeasureArgs
  ): Promise<UnitOfMeasure | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          poItem: args.data.poItem
            ? {
                connect: args.data.poItem,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UnitOfMeasure)
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "delete",
    possession: "any",
  })
  async deleteUnitOfMeasure(
    @graphql.Args() args: DeleteUnitOfMeasureArgs
  ): Promise<UnitOfMeasure | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Material])
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "read",
    possession: "any",
  })
  async materialsUoM(
    @graphql.Parent() parent: UnitOfMeasure,
    @graphql.Args() args: MaterialFindManyArgs
  ): Promise<Material[]> {
    const results = await this.service.findMaterialsUoM(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PoItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "read",
    possession: "any",
  })
  async poItem(
    @graphql.Parent() parent: UnitOfMeasure
  ): Promise<PoItem | null> {
    const result = await this.service.getPoItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
