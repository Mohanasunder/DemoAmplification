/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePoItemArgs } from "./CreatePoItemArgs";
import { UpdatePoItemArgs } from "./UpdatePoItemArgs";
import { DeletePoItemArgs } from "./DeletePoItemArgs";
import { PoItemFindManyArgs } from "./PoItemFindManyArgs";
import { PoItemFindUniqueArgs } from "./PoItemFindUniqueArgs";
import { PoItem } from "./PoItem";
import { Material } from "../../material/base/Material";
import { PoHeader } from "../../poHeader/base/PoHeader";
import { UnitOfMeasure } from "../../unitOfMeasure/base/UnitOfMeasure";
import { PoItemService } from "../poItem.service";

@graphql.Resolver(() => PoItem)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PoItemResolverBase {
  constructor(
    protected readonly service: PoItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "read",
    possession: "any",
  })
  async _poItemsMeta(
    @graphql.Args() args: PoItemFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PoItem])
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "read",
    possession: "any",
  })
  async poItems(@graphql.Args() args: PoItemFindManyArgs): Promise<PoItem[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PoItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "read",
    possession: "own",
  })
  async poItem(
    @graphql.Args() args: PoItemFindUniqueArgs
  ): Promise<PoItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoItem)
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "create",
    possession: "any",
  })
  async createPoItem(@graphql.Args() args: CreatePoItemArgs): Promise<PoItem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        material: args.data.material
          ? {
              connect: args.data.material,
            }
          : undefined,

        poHeader: args.data.poHeader
          ? {
              connect: args.data.poHeader,
            }
          : undefined,

        unitofMeasures: args.data.unitofMeasures
          ? {
              connect: args.data.unitofMeasures,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoItem)
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "update",
    possession: "any",
  })
  async updatePoItem(
    @graphql.Args() args: UpdatePoItemArgs
  ): Promise<PoItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          material: args.data.material
            ? {
                connect: args.data.material,
              }
            : undefined,

          poHeader: args.data.poHeader
            ? {
                connect: args.data.poHeader,
              }
            : undefined,

          unitofMeasures: args.data.unitofMeasures
            ? {
                connect: args.data.unitofMeasures,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PoItem)
  @nestAccessControl.UseRoles({
    resource: "PoItem",
    action: "delete",
    possession: "any",
  })
  async deletePoItem(
    @graphql.Args() args: DeletePoItemArgs
  ): Promise<PoItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Material, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Material",
    action: "read",
    possession: "any",
  })
  async material(@graphql.Parent() parent: PoItem): Promise<Material | null> {
    const result = await this.service.getMaterial(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PoHeader, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoHeader",
    action: "read",
    possession: "any",
  })
  async poHeader(@graphql.Parent() parent: PoItem): Promise<PoHeader | null> {
    const result = await this.service.getPoHeader(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UnitOfMeasure, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UnitOfMeasure",
    action: "read",
    possession: "any",
  })
  async unitofMeasures(
    @graphql.Parent() parent: PoItem
  ): Promise<UnitOfMeasure | null> {
    const result = await this.service.getUnitofMeasures(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
